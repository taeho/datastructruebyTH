http://blog.naver.com/akstn3110/220502581760

* 스택
 - 스택(Stack)이란 쌓아 올린다는 의미다. 따라서 스택 자료구조라는 것은 접시를 쌓듯이 자료를
 차곡 차곡 쌓아 올린 형태의 구조를 말한다. 스택의 형태는 뷔폐 식당의 쌓인 접시, 책상 위에 쌓아 둔
 책 등 주변에서 흔히 볼 수 있다.
 이 같이 일상에서 사용하는 스택의 개념을 추상화 하여 자료구조로 만든 것이 스택 자료구조다.
 스택은 같은 구조와 크기의 자료를 top이라고 정한 한 곳으로만 쌓을 수 있고, top으로만 접근하도록
 제한하여 만든 자료구조다.
 
 스택에서는 top을 통해서 들어온 자료가 일정한 방향으로 차곡차곡 쌓인다. 삽입되는 새 자료는
 top이 가리키고 있는 자료의 위에 쌓인다. 이때 새로 삽입된 자료는 스택의 마지막 자료가 되고,
 top이 가리키고 있는 스택의 마지막 자료만 삭제할 수 있다.
 
 따라서 스택은 시간순서에 따라 자료가 쌓이고, 삭제할 때는 가장 마지막에 삽입된 자료가 가장 먼저 삭제되는
 후입선출(LIFO, Last-In-First-Out)의 구조를 갖는다.
 
 스택에서 top을 통한 삽입 연산을 push, top을 통한 삭제 연산을 pop이라고 한다.

---------------------------------------------------------------------------

http://blog.naver.com/akstn3110/220502593570

* 스택의 push & pop 알고리즘

* push 알고리즘
 스택 S에 자료 x를 삽입하는 push() 알고리즘을 정의하면 다음과 같다.
 
 [ 스택의 push 알고리즘 ]
push(S, x)
	top <- top + 1;				// (1)
	if( top  > stack_SIZE) then overflow;
	else
		S(top) <- x;			// (2)
end push()

(1) 스택 S에서 top이 마지막 자료를 가리키고 있으므로 그 위에 자료를 삽입하려면 먼저
  top의 위치를 하나 증가시킨다. 이때 top의 위치가 스택의 크기보다 크다면 오버플로우(overflow)
  상태가 되므로 삽입 연산을 수행하지 못하고 연산이 종료 된다.
  
(2) 오버플로우 상태가 아니라면 스택의 top이 가리키는 위치에 x를 삽입한다.


* pop 알고리즘
 - 스택 S에서 자료를 삭제하는 pop()알고리즘은 다음과 같다.
 
 [ 스택의 pop 알고리즘 ]
pop(S)
	if(top = 0) then error;
	else {
		return S(top);				// (1)
		top <- top - 1;				// (2)
	}
end pop()

 (1) 스택이 공백 스택이 아니라면 top이 가리키는 원소를 먼저 반환한다.
 
 (2) 스택의 마지막 자료가 삭제되면 top의 위치는 그 아래의 자료가 되므로
 top의 위치를 하나 감소시킨다.


---------------------------------------------------------------------------
http://blog.naver.com/akstn3110/220502604231

* 스택의 구현
 - 스택을 구현하는 방법은 순차 자료구조 방식을 이용하는 방법과 연결 자료구조 방식을 이용하는 방법이 있다.

* 순차 자료구조 방식을 이용한 스택의 구현
 순차자료구조인 1차원 배열을 이용하여 스택을 구현 할 수 있다. 1차원 배열 stack[n]을 사용할 때
 n은 배열의 크기로서 배열원소의 개수를 나타내는데, 이것이 스택의 크기가 된다.
 스택에 원소가 쌓이는 순서는 배열의 인덱스(index)로 표현된다. 따라서 스택의 첫번째 원소는 stack[0]에
 저장하고, 스택의 두번째원소는 stack[1]에 저장하고, 스택의 i번째 원소는 stack[i-1]에 저장한다.
 
 스택의 top을 표현하기 위해서 배열 stack의 마지막 원소의 인덱스를 변수 top에 저장한다.
 변수 top은 0부터 n - 1 까지의 인덱스를 저장하므로 , 스택이 초기상태 (공백상태)일 때 top에는 -1 을 저장한다.
 
 
 * 연결 자료구조 방식을 이용한 스택의 구현
  순차 자료구조를 이용한 스택은 배열을 사용하여 구현하기는 쉽지만, 물리적으로 크기가 고정된 배열을 사용하기 때문에
  스택의 크기를 변경하기가 어렵고, 메모리의 낭비가 생길 수 있다는 문제가 있다.
  이러한 순차 자료구조 방식의 문제는 연결 자료구조 방식을 이용함으로써 해결할 수 있다.
  
  연결 자료구조 방식의 단순 연결 리스트를 이용하여 스택을 구현하면 스택의 원소는 연결 리스트의 노드가 된다.
  스택의 원소를 삽입할 때마다 연결리스트에 노드를 하나씩 연결한다. 그리고 스택 원소들 간의 순서는 연결 리스트 노드의
  링크를 사용하여 표현한다. 스택의 top을 표현하기 위해서 참조변수 top을 사용한다.


---------------------------------------------------------------------------
http://blog.naver.com/akstn3110/220503544325

 * 스택을 이용하여 중위 표기법을 후위 표기법으로 바꿔보자
 우선, 전위 표기법과 중위 표기법, 후위 표기법이란?
 (1) 전위 표기법 ( Prefix Notation)
     : 연산자를 앞에 표기하고 그 다음에 피연산자를 표기하는 방법 ex> +AB
 (2) 중위 표기법 ( Infix Notation)
     : 연산자를 피연산자의 가운데에 표기하는 방법 ex> A+B
 (3) 후위 표기법 ( Postfix Notation)
     : 연산자를 피연산자 뒤에 표기하는 방법 ex> AB+

 - 프로그램이 실행되면, testPair() 함수에서 중위 표기식으로 되어있는 수식의 괄호가 열리는 부분의
 괄호를 모두 스택에 넣는다. 그 후, 스택의 내용을 검사하며 괄호가 잘못된 곳이 있는지를 검사를 하며
 스택을 비운다.
 
 이후, toPostfix() 함수에서 사칙연산 기호는 스택에 넣고, 숫자는 배열에 대입한 뒤, 수식에서 괄호가 닫히는
 부분을 체크하여, 닫히는 부분에서는 스택의 top에 있는 기호를 배열로 넣어 후위 표기법으로 변환 시킨다.
























