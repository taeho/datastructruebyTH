http://blog.naver.com/akstn3110/220503587930

ㅁ큐(Queue)
 - 큐(Queue)는 스택과 마찬가지로 삽입과 삭제의 위치와 방법이 제한되어 있는 유한 순서 리스트
 (Finite Ordered List)지만, 스택과 달리 리스트의 한쪽 끝에서는 삽입 작업이 이루어지고 
 반대쪽 끝에서는 삭제 작업이 이루어져서, 삽입된 순서대로 삭제되는 선입선출(FIFO, First In First Out)
 의 구조로 운영된다.
 Queue
 <-(삭제) | ----- | ///// | ///// | ----- | <-(삽입)
          (front)                  (rear)
 -front: 저장된 원소 중에서 첫 번째 원소
 -rear : 저장된 원소 중에서 마지막 원소

 http://blog.naver.com/akstn3110/220503598221
 ㅁ큐의 구현(Queue)
  - 큐를 프로그램으로 구현하는 방법은 배열을 사용하는 순차 자료구조 방식과 참조 변수를 사용하는
  연결 자료구조 방식이 있다.
  
* 선형 큐
 - 1차원 배열을 사용하여 순차 자료구조 방식으로 큐를 구현해보자. 이때 배열의 크기는 큐의 크기,
 즉, 큐에 저장할 수 있는 최대 원소의 개수가 된다. 그리고 배열에 저장된 원소중에서 첫 번째 원소의
 인덱스를 저장할 front 변수와 저장된 마지막 원소의 인덱스를 저장할 rear 변수를 사용한다.
 초기 공백큐의 상태는 front 변수와 rear 변수의 값을 -1로 설정한다.
 
 선형 큐를 표현하기 위한 알고리즘을 살펴보자
 
 [초기 공백 큐 생성 알고리즘 ]
createQueue()
	Q[n];
	front <- -1;
	rear  <- -1;
end CreateQueue()
  
  큐에 최대로 저장할 수 잇는 원소 개수를 배열의 크기로 하는 1차원 배열을 선언한다.
  새로 생성하여 저장된 원소가 없는 공백 큐이므로 front 와 rear는 -1 로 초기화 한다.
  
[ 공백 큐 검사 알고리즘과 포화 상태 검사 알고리즘 ]
isEmpty()
	if(front = rear) then return true;
	else return false;
end isEmpty();

isFull(Q)
	if(rear  = n -1 ) then return true;
	else return false;
end isFull()

큐가 공백인 경우는 createQueue() 연산으로 공백 큐를 생성하여 front = -1, rear = -1 인경우와
마지막에 삽입한 rear의 원소를 삭제하여 front가 rear의 위치에 있는 경우가 있다.
이때 front와 rear 는 같은 값을 갖게 되므로 조건문 if(front= rear)의 결과 값이 참이 된다.

큐가 포화 상태인 경우는 배열의 마지막 인덱스까지 원소가 저장된 경우므로 큐에 저장된 마지막 원소의 인덱스,
즉 rear의 값이 배열의 마지막 인덱스(n-1) 인가를 검사한다.

http://blog.naver.com/akstn3110/220503607655

* 큐의 삽입 알고리즘

[큐의 삽입 알고리즘 ]

enQueue(Q, item)
	if(isFull(Q)) then Queue_Full();
	else {
		rear <- rear + 1;			// (1)
		Q[rear] <- item;			// (2)
	}
end enQueue()

 포화 상태가 아닌 큐에 원소를 삽입하려면 배열에 저장되어 있는 마지막 원소의 다음 자리에
 삽입해야 하므로 (1) 마지막 원소의 인덱스를 저장한 rear의 값을 하나 증가시켜 삽입할
 자리를 준비하고, (2) 그 인덱스에 해당하는 배열 원소 Q[rear]에 item 을 저장한다.
 
 
* 큐의 삭제 알고리즘
[ 큐의 삭제 알고리즘 ]
deQueue(Q)
	if(isEmpty(Q)) then Queue_empty();
	else {
		front <- front + 1;			// (1)
		return Q(front);			// (2)
	}
 end deQueue()
 
 delete(Q)
 	if(isEmpty(Q)) then Queue_Empty();
 	else front <- front + 1;
 end delete()
 
공백 상태가 아닌 큐에서 원소의 삭제는 언제나 큐에 저장된 원소 중에서 가장 앞에 있는 원소,
즉 가장 먼저 큐에 들어와 있는 원소를 가장 먼저 삭제해야 한다. 그러기 위해서
(1) front의 위치를 한 자리 뒤로 조정하여 큐에 남아 있는 첫 번째 원소의 위치로 이동하여
삭제할 자리를 준비하고, (2) 그 자리의 원소를 삭제하여 반환한다.

delete() 연산은 front의 원소를 삭제하는 연산이고, deQueue()연산은 front의 원소를
삭제하고 삭제한 원소를 반환하는 연산이다.

* 큐의 검색 알고리즘

[큐의 검색 알고리즘]

peek(Q)
	if(isEmpty()) then Queue_empty();
	else return Q(front+1);
end peek()

큐에서의 검색은 큐에 있는 원소중에서 가장 먼저 들어와 있는 원소, 즉 Q[front+1]에 잇는
원소를 검색하여 반환하는 연산이다.
 
 ------------------------------------------------------------
 http://blog.naver.com/akstn3110/220503691741
* 큐의 구현

* 연결 큐
 - 순차 자료구조 방식을 이용하여 구현한 큐에는 몇 가지 문제가 있다. 
 사용크기가 제한되어 있어서 큐의 길이를 마음대로 변경할 수 없고, 원소가 없을때에도
 항상 처음 크기를 유지하고 있어야 하므로 메모리도 낭비된다.
 이와 같은 문제를 극복하기 위해 연결 자료 구조 방식을 이용하여 크기에 제한이 없는
 큐를 연결 큐(Linked Queue)라고 한다.
 
 연결 큐에서 원소는 데이터 필드와 링크필드를 가진 노드로 구성하며,
 첫번째 노드를 가리키는 참조 변수 front와 마지막 노드를 가리키는 참조변수 rear를
 사용한다. 연결 큐의 초기상태(공백 큐)는 front 와 rear을 널(null)로 설정하여
 표현한다.
 
 
 ------------------------------------------------------------
 http://blog.naver.com/akstn3110/220503696169
 
 * 큐의 구현

* 초기 공백 연결 큐 생성 알고리즘
[ 초기 공백 연결 큐 생성 알고리즘 ]
createLinkedQueue()
	front	<- null;
	rear	<- null;
 end createLinkedQueue()
 
 초기에 생성한 연결 큐는 저장된 노드가 없는 공백 연결 큐이므로 front 와 rear을 null로 초기화한다.
 
 * 공백 연결 큐 검사 알고리즘
 [ 공백 연결 큐 검사 알고리즘 ]
 isEmpty(LQ)
 	if(front = null) then return true;
 	else return false;
 end isEmpty()
 
 연결 큐가 공백인 경우는 연결된 노드가 하나도 없는 상태이다. 이는 front 가 null 인 경우이므로
 front 의 상태를 검사하면 큐의 공백 여부를 알 수 있다.
 
 * 연결 큐의 삽입 알고리즘
 [ 연결 큐의 삽입 알고리즘 ]
 
 enQueue(LQ, item)
 	new <- getNode();
 	new.data <- item;			// (1)
 	new.link <- null;
 	if(isEmpty(LQ)) then {		// (2) 공백인 경우
 		rear <- new;
 		front <- new;
 	}
 	else {						// (3) 공백이 아닌 경우
 		rear.link <- new;
 		rear <- new;
 	} 
end enQueue()

(1) 삽입할 새 노드를 생성하여 데이터 필드에 item을 저장한다.
 삽일할 새 노드는 연결 후의 마지막 노드가 되어야 하므로 링크필드에 null에 저장한다.
 
(2) 새 노드를 삽입하기 전에 연결큐가 공백인지 아닌지를 먼저 검사한다.
 연결 큐가 공백 같은 경우에는 삽입할 새 노드가 큐의 첫 번째 노드이자 마지막 노드이므로
 참조변수 front 와 rear가 모두 새 노드를 가리키도록 설정한다.
 
 (3) 큐가 공백이 아닌 경우, 즉, 노드가 있는 경우에는 현재 큐의 마지막 노드의 뒤에 새 노드를
 삽입한다. 그리고 마지막 노드를 가리키는 rear가 삽입한 새노드를 가리키도록 설정한다.
 
 
 * 연결 큐의 삭제 알고리즘
 
 큐에서 삭제 연산은 큐가 공백이 아닌 경우에만 수행한다.
 
 [ 연결 큐의 삭제 알고리즘 ]
 deQueue(LQ)
 	if(isEmpty(LQ)) then Queue_Empty();
 	else {
 		old 	<- front;					// (1)
 		item 	<- front.data;
 		front	<- front.link;				// (2)
 		if(isEmpty(LQ)) then rear <- null;	// (3)
 		return Node(old);					// (4)
 		return item;
 	}
end deQueue()

delete(LQ)
	if(isEmpty(LQ)) then Queue_Empty();
	else {
		old		<- front;
		front	<- front.link;
		if(isEmpty(LQ)) then rear <- null;
		returnNode(old);
	} 	
end delete()

(1) 삭제 연산에서 삭제할 노드는 front가 가리키고 있는 첫 번째 노드이다.
front가 가리키는 노드를 참조변수 old가 가리키게 하여 삭제할 노드를 지정한다.

(2) 삭제 연산 후에는 현재 front 노드의 다음 노드가 되어야 하므로 front 를 
 다음 노드(front.link)로 재설정한다.
 
(3) 현재 큐에 노드가 하나 뿐이어서 재설정한 front가 null 이 되는 경우에는 
삭제 연산 후에 공백 큐가 될 것이므로 rear를 null로 설정해준다.

(4) old가 가리키고 있는 노드를 삭제하여 메모리 공간을 시스템에 반환 (returnNode()) 한다.

* 연결 큐의 검색 알고리즘
[ 연결 큐의 검색 알고리즘 ]

peek(LQ)
   if(isEmpty()) then Queue_Empty();
   else return (front.data);
end peek()

큐에서 검색연산은 항상 큐의 첫 번째 노드, 즉 front 노드의 데이터 필드 값을 반환한다.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 	




























