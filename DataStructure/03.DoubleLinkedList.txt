http://blog.naver.com/akstn3110/220502544617

* 이중 연결 리스트
 - 단순 연결 리스트에서 선행 노드에 접근하기가 어렵다는 점을 개선하여
  원형 연결 리스트를 구성했지만, 원형 연결 리스트에서도 현재 노드의
  바로 이전 노드에 접근하려면 전체 리스트를 한바퀴 순회해야 하는 문제가 있다.
  이러한 문제는 리스트의 링크가 한 방향으로만 되어있어서 반대 방향으로는 
  순회할 수 없기 때문에 발생한다. 이런 문제를 개선하여 양쪽 방향으로 순회할 수 
  있도록 연결한 리스트를 이중 연결 리스트(Double Linked List)라고 한다.
  이중 연결 리스트이 노드 구조는 다음과 같이 두개의 링크 필드와 한개의 데이터 필드로
  구성한다.
  	[llink]=[data]=[rlink]
 llink(left link) 필드는 왼쪽 노드와 연결하는 링크필드고, rlink(right link)필드는
 오른쪽 노드와 연결하는 링크 필드다. 이중 연결 리스트 노드의 데이터 구조를 다음과
 같이 DblNode 클래스의 데이터 멤버로 정의 할 수 있다.
 
 class DQNode {
 	char data;
 	DQNode rlink;
 	DQNode llink;
 }
 
 이중 연결 리스트에서 첫 번째와 마지막 노드가 아닌 임의의 노드 p에 대해서
 다음과 같은 관계가 성립한다.
 
 p = p.llink.rlink = p.rlink.llink
 
 --------------------------------------------------------------
 * 이중 연결 리스트의 알고리즘
 
 * 이중 연결 리스트에서의 삽입 연산
  - 이중 연결 리스트에서의 원소 삽입 방법을 정리해 보면 다음과 같다.
1) 삽입할 노드를 가져온다.
2) 새 노드의 데이터 필드에 값을 저장한다.
3) 새 노드의 왼쪽 노드의 오른쪽 링크를 새 노드의 오른쪽 링크에 저장한다.
4) 그리고 왼쪽 노드의 오른쪽 링크에 새 노드의 주소를 저장한다.
5) 새 노드의 오른쪽 노드의 왼쪽 링크를 새 노드의 왼쪽 링크에 저장한다.
6) 그리고 오른쪽 노드의 왼쪽 링크에 새 노드의 주소를 저장한다.

위의 이중 연결 리스트 원소 삽입 방법을 다음과 같이 알고리즘으로 정의할 수 있다

[ 이중 연결 리스트의 원소 삽입 알고리즘 ]

insertNode(DL, pre, x)
	new <- getNode();
	new.data <- x;
	new.rlink <- pre.rlink;		// (1)
	pre.rlink <- new;			// (2)
	new.llink <- pre;			// (3)
	new.rlink.llink <- new;		// (4)
end insertNode()

(1) 노드 pre의 rlink 값을 노드 new 의 rlink에 저장하여 노드 pre의 오른쪽노드를
  삽입할 노드 new의 오른쪽 노드로 연결한다.

(2) 새 노드 new의 참조값을 노드 pre의 rlink에 저장하여 노드 new를 노드 pre의
  오른쪽 노드로 연결한다.
  
(3) 참조변수 pre의 값을 삽입할 노드 new의 llink에 저장하여 노드 pre를 노드 new 의
  왼쪽 노드로 연결한다.
  
(4) new의 값을 노드 new의 오른쪽 노드의 llink에 저장하여 노드 new의 오른쪽 노드의
 왼쪽 노드로 노드 new를 연결한다.


* 이중 연결 리스트에서의 삭제 연산

이중 연결 리스트에서의 원소 삭제 방법을 정리해 보면 다음과 같다.

(1) 삭제할 노드의 오른쪽 노드의 주소(old.link)를 삭제할 노드의 왼쪽 노드(old.llink)의
  오른쪽 링크(rlink)에 저장한다.
(2) 삭제할 노드의 왼쪽 노드의 주소(old.link)를 삭제할 노드의 오른쪽 노드(old.rlink)의
  왼쪽 링크(llink)에 저장한다.
(3) 삭제한 노드를 자유 공간 리스트에 반환한다.

위의 이중 연결 리스트 원소 삭제 방법을 다음과 같이 알고리즘으로 정의할 수 있다.

[ 이중 연결 리스트의 원소 삭제 알고리즘 ]

deleteNode(DL, old)
	old.llink.rlink <- old.rlink;	// (1)
	old.rlink.llink <- old.llink;	// (2)
	returnNode(old);				// (3)
end deleteNode()

(1) 삭제할 노드 old의 오른쪽 노드의 참조값을 노드 old의 왼쪽 노드의 rlink에
  저장하여 노드 old의 오른쪽 노드를 노드 old의 왼쪽 노드의 오른쪽에 연결한다.
  
(2) 삭제할 노드 old의 왼쪽 노드의 참조값을 노드 old의 오른쪽 노드의 llink에
  저장하여 노드 old의 왼쪽 노드를 노드 old의 오른쪽 노드와 연결한다.
  
(3) 삭제된 노드 old는 자유공간 리스트에 반환한다.










	
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 